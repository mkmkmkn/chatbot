{"version":3,"sources":["assets/img/questioner.jpg","assets/img/mk.jpg","components/AnswersList.jsx","components/Answer.jsx","components/chats.jsx","components/chat.jsx","components/Forms/TextInput.jsx","components/Forms/FormDialog.jsx","firebase/config.js","firebase/index.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","AnswersList","props","className","answers","map","value","index","content","nextId","key","toString","select","useStyles","makeStyles","createStyles","borderColor","color","fontWeight","marginBottom","backgroundColor","Answer","classes","Button","button","variant","onClick","height","padding","overflow","Chats","List","chats","id","chat","text","type","Chat","isQuestion","ListItem","ListItemAvatar","Avatar","alt","src","Mk","Questioner","TextInput","TextField","fullWidth","label","margin","multiline","rows","onChange","FormDialog","inputName","event","setState","name","target","inputEmail","email","inputDescription","description","submitForm","state","bind","Dialog","open","this","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","autoFocus","React","Component","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","App","displayNextQuestion","nextQuestionId","push","dataset","question","currentId","selectAnswer","selectedAnswer","test","a","document","createElement","href","click","handleClickOpen","setTimeout","initDataset","collection","get","then","snapshots","forEach","doc","data","scrollArea","getElementById","scrollTop","scrollHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c25ec969.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/questioner.b17f9bb1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mk.5fecd33e.jpg\";","import React from \"react\";\r\nimport {Answer} from \"./index\";\r\n\r\nconst AnswersList = (props) => {\r\n    return(\r\n        <div className=\"c-grid__answer\">\r\n            {props.answers.map((value,index)=> {\r\n                return <Answer content={value.content} nextId={value.nextId} key={index.toString()} select={props.select}/>\r\n            })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnswersList;","import React from 'react';\r\nimport { makeStyles,createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(() => (\r\n    createStyles({\r\n        \"button\": {\r\n            borderColor: 'rgb(160, 0, 0)',\r\n            color: 'rgb(160, 0, 0)',\r\n            fontWeight: 600,\r\n            marginBottom: '8px',\r\n            \"&:hover\": {\r\n                backgroundColor: 'rgba(160, 0, 0, 0.8)',\r\n                color: '#fff'\r\n            }\r\n        }\r\n    })\r\n\r\n));\r\n\r\nconst Answer = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"outlined\"\r\n            onClick={() => props.select(props.content, props.nextId)}\r\n        >\r\n            {props.content}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default Answer;","import React from 'react';\r\nimport {createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport {Chat} from './index';\r\n\r\n\r\nconst useStyles = makeStyles(() => (\r\n    createStyles({\r\n        \"chats\": {\r\n            height: 400,\r\n            padding: '0',\r\n            overflow: 'auto'\r\n        }\r\n    })\r\n\r\n));\r\n\r\n\r\nconst Chats = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <List className={classes.chats} id={\"scroll-area\"}>\r\n            {props.chats.map((chat, index)=>{\r\n                return <Chat text={chat.text} type={chat.type} key={index.toString()}/>\r\n            })}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Chats;","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Questioner from '../assets/img/questioner.jpg'\r\nimport Mk from '../assets/img/mk.jpg'\r\n\r\n\r\nconst Chat = (props) => {\r\n    const isQuestion = (props.type === 'question');\r\n    const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse';\r\n\r\n    return (\r\n        <ListItem className={classes}>\r\n            <ListItemAvatar>\r\n                {isQuestion ? (\r\n                    <Avatar alt=\"icon\" src={Mk} />\r\n                ) : (\r\n                    <Avatar alt=\"icon\" src={Questioner} />\r\n                )}\r\n            </ListItemAvatar>\r\n            <div className=\"p-chat__bubble\" >{props.text}</div>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst TextInput = (props) => {\r\n    return (\r\n        <TextField\r\n            fullWidth={true}\r\n            label={props.label}\r\n            margin={\"dense\"}\r\n            multiline={props.multiline}\r\n            rows={props.rows}\r\n            value={props.value}\r\n            type={props.type}\r\n            onChange={props.onChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TextInput;","import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextInput from './TextInput'\r\n\r\nexport default class FormDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name:\"\",\r\n            email:\"\",\r\n            description:\"\"\r\n        }\r\n\r\n        this.inputName = this.inputName.bind(this)\r\n        this.inputEmail = this.inputEmail.bind(this)\r\n        this.inputDescription = this.inputDescription.bind(this)\r\n    }\r\n\r\n    inputName = (event) => {\r\n        this.setState({name: event.target.value})\r\n    }\r\n    inputEmail = (event) => {\r\n        this.setState({email: event.target.value})\r\n    }\r\n    inputDescription = (event) => {\r\n        this.setState({description: event.target.value})\r\n    }\r\n\r\n    submitForm = () => {\r\n        const name = this.state.name\r\n        const email = this.state.email\r\n        const description = this.state.description\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog\r\n                open={this.props.open}\r\n                onClose={this.props.handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">お問い合わせフォーム</DialogTitle>\r\n                <DialogContent>\r\n                    <TextInput \r\n                        label={\"お名前(必須)\"} multiline={false} rows={1} \r\n                        value={this.state.name} type={\"text\"} onChange={this.inputName}\r\n                    />\r\n                    <TextInput \r\n                        label={\"メールアドレス(必須)\"} multiline={false} rows={1} \r\n                        value={this.state.email} type={\"email\"} onChange={this.inputEmail}\r\n                    />\r\n                    <TextInput \r\n                        label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5} \r\n                        value={this.state.description} type={\"text\"} onChange={this.inputDescription}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.props.handleClose} color=\"primary\">\r\n                        キャンセル\r\n                    </Button>\r\n                    <Button onClick={this.submitForm} color=\"primary\" autoFocus>\r\n                        送信\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog >\r\n        )\r\n    }\r\n}","const firebaseConfig = {\r\n    apiKey: \"AIzaSyB55wxDJRjMyFFcSO9_KLa9xpWRFIfhpBE\",\r\n    authDomain: \"chatbot-bd9eb.firebaseapp.com\",\r\n    databaseURL: \"https://chatbot-bd9eb.firebaseio.com\",\r\n    projectId: \"chatbot-bd9eb\",\r\n    storageBucket: \"chatbot-bd9eb.appspot.com\",\r\n    messagingSenderId: \"568072698131\",\r\n    appId: \"1:568072698131:web:c47b41af64a5312cc682e6\",\r\n    measurementId: \"G-RYEX9DDDX2\"\r\n  };\r\n\r\n  export default firebaseConfig;","import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport firebaseConfig from \"./config\";\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const db = firebase.firestore();","import React from 'react';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats } from \"./components/index\";\nimport FormDialog from './components/Forms/FormDialog';\nimport {db} from './firebase/index';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answers: [],\n      chats: [],\n      currentId: \"init\",\n      dataset: {},\n      open: false\n    }\n    this.selectAnswer = this.selectAnswer.bind(this)\n    this.handleClickOpen = this.handleClickOpen.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  displayNextQuestion = (nextQuestionId) => {\n    const chats = this.state.chats\n    chats.push({\n      text: this.state.dataset[nextQuestionId].question,\n      type: 'question'\n    })\n\n    this.setState({\n      answers: this.state.dataset[nextQuestionId].answers,\n      chats: chats,\n      currentId: nextQuestionId\n    })\n  }\n\n  selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      case (nextQuestionId === 'init'):\n        this.displayNextQuestion(nextQuestionId)\n        break;\n\n      case (/^https:*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank';\n        a.click();\n        break;\n\n      case (nextQuestionId === 'contact'):\n        this.handleClickOpen();\n        break;\n\n\n      default:\n        const chat = {\n          text: selectedAnswer,\n          type: 'answer'\n        }\n\n        const chats = this.state.chats;\n        chats.push(chat)\n\n        this.setState({\n          chats: chats\n        })\n\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 1000)\n\n        break;\n    }\n  }\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  initDataset = (dataset) => {\n    this.setState({dataset: dataset})\n  }\n\n  componentDidMount() {\n    //非同期処理\n    (async() => {\n      const dataset = this.state.dataset\n\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id\n          const data = doc.data()\n          dataset[id] = data\n        })\n      })\n\n      this.initDataset(dataset)\n      const initAnswer = \"\";\n      this.selectAnswer(initAnswer, this.state.currentId)\n    })()\n  }\n\n  componentDidUpdate() {\n    const scrollArea = document.getElementById('scroll-area');\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={this.state.chats} />\n          <AnswersList answers={this.state.answers} select={this.selectAnswer} />\n          <FormDialog open={this.state.open} handleClose={this.handleClose} />\n        </div>\n      </section>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}